//Brute force approach
#include <bits/stdc++.h>

using namespace std;
 
int getsingleElement(vector<int> &arr){
    int n = arr.size();
    for(int i=0; i<n; i++){
        int num = arr[i];
        int cnt = 0; 
        
        for(int j=0; j<n; j++){
          if(arr[j] == num)
             cnt++;
        }
        if(cnt == 1) return num;
    }
    return -1;
}

int main(){
    vector<int> arr = {4,1,2,1,2};
    int ans = getsingleElement(arr);
    cout<< " single element is  "<< ans <<endl;
    return 0;
}

// Better Approach 1. by using Array hashing 
#include <bits/stdc++.h>

using namespace std;
 
int getsingleElement(vector<int> &arr){
    int n = arr.size();
    int maxi = arr[0];
    for(int i=0; i<n; i++){
        maxi = max(maxi, arr[i]);
    }
    vector<int> hash(maxi+1, 0);
    for(int i=0; i<n; i++){
        hash[arr[i]]++;
    }
    for(int i=0; i<n; i++){
        if(hash[arr[i]] == 1)
           return arr[i];
    }
    return -1;
}

int main(){
    vector<int> arr = {4,1,2,1,2};
    int ans = getsingleElement(arr);
    cout<< " single element is  "<< ans <<endl;
    return 0;
}

// Better approach 2 . by using map
#include <bits/stdc++.h>

using namespace std;
 
int getsingleElement(vector<int> &arr){
    int n = arr.size();
    map<int, int> mpp;
    for(int i=0; i<n; i++){
       map[arr[i]]++;
    }
    for(auto it : mpp){
        if(it.second == 1)
           return it.first;
    }
    return -1;
}

int main(){
    vector<int> arr = {4,1,2,1,2};
    int ans = getsingleElement(arr);
    cout<< " single element is  "<< ans <<endl;
    return 0;
}

